
 * page allocation/deallocation is done inside global mutex, using either a free list OR the bitmap like in MinTxEngine
 * checkpointer will free all pages from free list, and truncate file if possible, doen using holding the same global lock

 API
 * void* get_new_page(uint64_t* page_id);
 * void* acquire_page(uint64_t page_id);
 * void release_page(void* page, int free_page);
 * void free_page(uint64_t page_id);

Project description
 * use 1 temp_block_file underneath, no Bufferpool no WALe
 * no O_DIRECT, no O_SYNC and no O_DSYNC, no flush and no fsync
 * instead use temp_block_file that internally uses O_TMPFILE
 * no latches/no locks provided for pages or frames
 * use mmap to map pages from this blockfile, full use of linux page cache
 * no aborts only crashes will be supported using exit(-1)
 * downgrade and upgrade are no-ops